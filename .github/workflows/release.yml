name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Match semantic version tags, e.g. v1.0.0

permissions:
  contents: write  # Create Release and upload files

jobs:
  build-and-release:
    name: Build and Release on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            runner: ubuntu-latest
            
          - os: windows
            runner: windows-latest
            
          - os: macos
            runner: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          .gradle/
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsecret-1-dev libglib2.0-dev pkg-config
        
    - name: Setup Windows build environment
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: |
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-pkg-config
          
    - name: Build release artifacts
      run: |
        echo "Building entire project on ${{ matrix.os }}"
        ./gradlew clean build --info
        
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
    - name: Prepare release files
      run: |
        mkdir -p release-${{ matrix.os }}
        VERSION="${{ steps.version.outputs.version }}"
        
        # Find and copy all KLIB files
        find . -name "*.klib" -type f | while read file; do
          if [ -n "$file" ]; then
            filename=$(basename "$file")
            cp "$file" "release-${{ matrix.os }}/${filename}"
            echo "Copied: $file -> release-${{ matrix.os }}/${filename}"
          fi
        done
        
        # Generate checksums
        cd release-${{ matrix.os }}
        if [ -n "$(ls *.klib 2>/dev/null)" ]; then
          sha256sum *.klib > checksums-${{ matrix.os }}.txt
        else
          touch checksums-${{ matrix.os }}.txt
        fi
        cd ..
        
        echo "Release files for ${{ matrix.os }}:"
        ls -la release-${{ matrix.os }}/
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: release-${{ matrix.os }}/
        retention-days: 1

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Organize release files
      run: |
        mkdir -p final-release
        VERSION="${{ steps.version.outputs.version }}"
        
        # Copy all KLIB files from all platforms
        find artifacts/ -name "*.klib" -type f | while read file; do
          if [ -n "$file" ]; then
            cp "$file" final-release/
          fi
        done
        
        # Combine all checksums
        find artifacts/ -name "checksums-*.txt" -type f -exec cat {} \; > final-release/checksums.txt
        
        echo "Final release files:"
        ls -la final-release/
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        cat > release-notes.md << EOF
        ## Kotlin Native Interop v${VERSION}
        
        ### 🚀 Features
        
        - **Cross-platform FFI support**: Provides Kotlin/Native interoperability with C libraries
        - **Multi-architecture support**: Supports Linux x64/ARM64 and Windows x64 platforms
        - **libsecret integration**: Linux platform key management functionality
        - **wincred integration**: Windows platform credential management functionality
        
        ### 📦 Build Artifacts
        
        This release includes KLIB files for all supported platforms. The build system automatically detects the platform and builds the appropriate modules.
        
        ### 🛠️ Usage
        
        Add the appropriate KLIB dependency to your Kotlin/Native project based on your target platform.
        
        ### 🔧 System Requirements
        
        - **Linux**: libsecret-1-dev, libglib2.0-dev
        - **Windows**: MinGW toolchain
        - **Kotlin**: 1.8+
        - **Gradle**: 7+
        
        ---
        
        Build time: \$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        EOF
        
        {
          echo 'notes<<EOF'
          cat release-notes.md
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body: ${{ steps.release_notes.outputs.notes }}
        files: |
          final-release/*
        draft: true
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Release Summary
      run: |
        echo "✅ Draft Release ${{ steps.version.outputs.tag }} created successfully!"
        echo "📝 Status: Draft (requires manual publishing)"
        echo "📦 Files uploaded:"
        ls -la final-release/
        echo ""
        echo "🔗 Draft Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
        echo ""
        echo "📋 Release Steps:"
        echo "1. Visit the URL above to view the draft Release"
        echo "2. Check build artifacts and release notes"
        echo "3. Click 'Publish release' button to officially publish"